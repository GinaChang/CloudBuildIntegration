steps:
- name: "ubuntu:18.04"
  id: Get IP
  entrypoint: 'bash'
  args: 
    - '-c'
    - |
        apt update && apt install iproute2 -y
        ip -4 a

# - name: "gcr.io/cloud-builders/kubectl"
#   id: Get Node
#   args: ['get', 'nodes']
#   env:
#   - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'

- name: gcr.io/cloud-builders/gcloud
  id: Deploy
  env:
  - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  entrypoint: sh
  args:
  - '-c'
  - |
      gcloud compute ssh gina.chang@instance-1 --zone asia-east1-b  --tunnel-through-iap --  -L 8888:0.0.0.0:8888 -N -q -f
      HTTPS_PROXY=localhost:8888 kubectl apply -f kubernetes/deployments/dev/backend-dev.yaml

# - name: 'gcr.io/cloud-builders/kubectl'
#   id: Deploy
#   env:
#   - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
#   args:
#   - 'apply'
#   - '-f'
#   - 'kubernetes/deployments/dev/backend-dev.yaml'

options:
  workerPool:
    'projects/tw-rd-ca-gina/locations/asia-east1/workerPools/cloud-build-pool-test'
# steps:
# # This step deploys the new version of our container image
# # in the hello-cloudbuild Kubernetes Engine cluster.
# - name: 'gcr.io/cloud-builders/gcloud'
#   id: get credentials
#   entrypoint: /bin/sh
#   env:
#   - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
#   args:
#   - '-c'
#   - |
#     CLUSTER=$$(gcloud config get-value container/cluster)
#     PROJECT=$$(gcloud config get-value core/project)
#     REGION=$$(gcloud config get-value compute/region)
#     gcloud container clusters get-credentials "$${CLUSTER}" --region "$${REGION}" --project "$${PROJECT}"

# - name: 'gcr.io/cloud-builders/kubectl'
#   id: Deploy
#   env:
#   - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
#   args:
#   - 'apply'
#   - '-f'
#   - 'kubernetes/deployments/dev/backend-dev.yaml'

# This step copies the applied manifest to the production branch
# The COMMIT_SHA variable is automatically
# replaced by Cloud Build.
# - name: 'gcr.io/cloud-builders/git'
#   id: Copy to production branch
#   entrypoint: /bin/sh
#   args:
#   - '-c'
#   - |
#     set -x && \
#     # Configure Git to create commits with Cloud Build's service account
#     git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') && \
#     # Switch to the production branch and copy the kubernetes.yaml file from the candidate branch
#     git fetch origin production && git checkout production && \
#     git checkout $TAG_NAME kubernetes.yaml && \
#     # Commit the kubernetes.yaml file with a descriptive commit message
#     git commit -m "Manifest from commit $TAG_NAME
#     $(git log --format=%B -n 1 $TAG_NAME)" && \
#     # Push the changes back to Cloud Source Repository
#     git push origin production
# [END cloudbuild-delivery]
# options:
#   workerPool:
#     'projects/tw-rd-ca-gina/locations/asia-east1/workerPools/cloud-build-private-pool'