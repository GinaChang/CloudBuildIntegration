# [START cloudbuild-delivery]
# add authorized-networks test2
steps:
# This step deploys the new version of our container image
# in the hello-cloudbuild Kubernetes Engine cluster.
- name: 'gcr.io/cloud-builders/gcloud'
  id: get credentials
  entrypoint: /bin/sh
  env:
  - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  args:
  - '-c'
  - |
    CLUSTER=$$(gcloud config get-value container/cluster)
    PROJECT=$$(gcloud config get-value core/project)
    REGION=$$(gcloud config get-value compute/region)
    gcloud container clusters get-credentials "$${CLUSTER}" --region "$${REGION}" --project "$${PROJECT}"
  options:
    workerPool:
      'projects/$GOOGLE_CLOUD_PROJECT/locations/asia-east1/workerPools/cloud-build-private-pool'

- name: 'gcr.io/cloud-builders/kubectl'
  id: Deploy
  env:
  - 'CLOUDSDK_COMPUTE_REGION=${_CLOUDSDK_COMPUTE_REGION}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  args:
  - 'apply'
  - '-f'
  - 'kubernetes/deployments/dev/backend-dev.yaml'
  options:
    workerPool:
      'projects/$GOOGLE_CLOUD_PROJECT/locations/asia-east1/workerPools/cloud-build-private-pool'

# This step copies the applied manifest to the production branch
# The COMMIT_SHA variable is automatically
# replaced by Cloud Build.
# - name: 'gcr.io/cloud-builders/git'
#   id: Copy to production branch
#   entrypoint: /bin/sh
#   args:
#   - '-c'
#   - |
#     set -x && \
#     # Configure Git to create commits with Cloud Build's service account
#     git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') && \
#     # Switch to the production branch and copy the kubernetes.yaml file from the candidate branch
#     git fetch origin production && git checkout production && \
#     git checkout $TAG_NAME kubernetes.yaml && \
#     # Commit the kubernetes.yaml file with a descriptive commit message
#     git commit -m "Manifest from commit $TAG_NAME
#     $(git log --format=%B -n 1 $TAG_NAME)" && \
#     # Push the changes back to Cloud Source Repository
#     git push origin production
# [END cloudbuild-delivery]